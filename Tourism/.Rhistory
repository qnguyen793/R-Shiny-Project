runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
head(tourism)
country = rownames(tourism$Country.Name)
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
head(choice)
choice
country
country = tourism$Country.Name
country
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
most_arrivals = tourism %>% filter(.,year == 2018)
most_arrivals
tourism
colnames(tourism)
most_arrivals = tourism %>% filter(.,year == 2017)
most_arrivals
most_arrivals = tourism %>% filter(.,year == 2017) %>% sort(.,desc(arrivals))
most_arrivals = tourism %>% filter(.,year == 2017) %>% order(.,desc(arrivals))
most_arrivals = tourism %>% filter(.,year == 2017) %>% order(.,arrivals)
head(tourism)
colnames(tourism)
most_arrivals = tourism %>% filter(.,year == 2017) %>% arrange(.,dsec(arrivals))
most_arrivals = tourism %>% filter(.,year == 2017) %>% arrange(.,desc(arrivals))
most_arrivals
head(most_arrivals)
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
m = 10000000000000
put(m,comma8)
comma(m)
library(scales)
comma(m)
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
library(leaflet)
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
?leaflet
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
library(devtools)
install.packages("devtools")
devtools::install_github('rstudio/DT')
library(DT)
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
tourism$Country.Code[1]
tourism$Country.Code[[1]]
(tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code))[1]
(tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code))[[1]]
(tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code))[[1]][1]
runApp('~/Desktop/R-Shiny-Project/Tourism')
head(tourism)
(tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code))[1][1]
(tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code))[[1]][1]
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
?selectizeInput
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
?column
runApp('~/Desktop/R-Shiny-Project/Tourism')
?box
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
?cat
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
random_country = sample(most_arrivals)
random_country
?sample
random_country = sample_frac(most_arrivals)
random_country
random_country = sample_n(most_arrivals,1)
random_country
random_country
random_country
sample_n(most_arrivals,1)
sample_n(most_arrivals,1)
sample_n(most_arrivals,1)
sample_n(most_arrivals,1)
sample_n(most_arrivals,1)
m=.Last.value
m
m
m
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
date()
time()
runApp('~/Desktop/R-Shiny-Project/Tourism')
as.numeric(Sys.time())
as.numeric(Sys.time())
as.numeric(Sys.time())
time = as.numeric(Sys.time())
time
time
time
time
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
?leaflet
leaflet("norway")
Map(norway)
Map('norway'')
Map(norway)
1
end
''
Map('italy')
library(maps)
map(italy)
map('italy')
?map
?leaflet
map()
G1 <- gvisGeoMap(Exports,locationvar='Country',numvar='Profit',options=list(dataMode='regions'))
plot(G1)
library(googleVis)
G1 <- gvisGeoMap(Exports,locationvar='Country',numvar='Profit',options=list(dataMode='regions'))
plot(G1)
G1 <- gvisGeoMap(Exports,locationvar='Norway',numvar='Profit',options=list(dataMode='regions'))
plot(G1)
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
Geo=gvisGeoChart(country, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
?gvisGeoMap
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism$Country.Name[tourism$Country.Name == 'Russian Federation'] = Russia
tourism$Country.Name[tourism$Country.Name == 'Russian Federation'] = 'Russia'
class(tourism$Country.Name)
as.factor('Russia')
tourism$Country.Name[tourism$Country.Name == 'Russian Federation'] = as.factor('Russia')
lapply(tourism$Country.Name,as.character)
class(.Last.value)
tourism$Country.Name = lapply(tourism$Country.Name,as.character)
class(tourism$Country.Name)
runApp('~/Desktop/R-Shiny-Project/Tourism')
class(tourism$Country.Name)
plot(Geo)
runApp('~/Desktop/R-Shiny-Project/Tourism')
class(tourism$Country.Name)
class(tourism$Country.Code)
head(tourism)
tourism %>% filter(.,Country.Name == input$selected) %>% select(.,Country.Code)[[1]][2]
tourism %>% filter(.,Country.Name == Switzerland) %>% select(.,Country.Code)[[1]][2]
tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code)[[1]][2]
tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code)[1]
tourism %>% filter(.,Country.Name == 'Switzerland') %>% select(.,Country.Code)[[1]]
tourism$Country.Code[1]
tourism %>% filter(.,Country.Name == 'China')
tourism %>% filter(.,Country.Name == 'China')[1]
tourism %>% filter(.,Country.Name == 'China')
.Last.value[1]
.Last.value[2]
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
tourism$Country.Name[tourism$Country.Name == 'Russian Federation'] = 'Russia'
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Korea, Rep.'] = c('Russia','Korea')
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Korea, Rep.')] = c('Russia','Korea')
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt, Arab Rep.')] = c('Russia','Egypt')
plot(Geo)
tourism$Country.Name == 'Egypt'
filter(tourism,Country.Name == 'Egypt')
?gvisGeoChart
Geo=gvisGeoChart(tourism, locationvar="Country.Code")
plot(Geo)
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
=c('Russia','Egypt','Venezuela','Democratic Republic of the Congo','Republic of the Congo')
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt, Arab Rep.','Venezuela, RB','Congo, Dem. Rep.','Congo, Rep.')] = c('Russia','Egypt','Venezuela','Democratic Republic of the Congo','Republic of the Congo')
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt, Arab Rep.','Venezuela, RB','Congo, Dem. Rep.','Congo, Rep.',
'Iran, Islamic Rep.')] = c('Russia','Egypt','Venezuela','Democratic Republic of the Congo','Republic of the Congo','Iran')
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt, Arab Rep.','Venezuela, RB','Congo, Dem. Rep.','Congo, Rep.','Iran, Islamic Rep.')] = c('Russia','Egypt','Venezuela','Democratic Republic of the Congo','Republic of the Congo','Iran')
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt, Arab Rep.','Venezuela, RB','Iran, Islamic Rep.')] = c('Russia','Egypt','Venezuela','Iran')
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt, Arab Rep.','Venezuela, RB')] = c('Russia','Egypt','Venezuela')
filter(tourism.,Country.Name == 'Egypt')
runApp('~/Desktop/R-Shiny-Project/Tourism')
runApp('~/Desktop/R-Shiny-Project/Tourism')
tourism$Country.Name[tourism$Country.Name == c('Russian Federation','Egypt,Arab Rep.','Venezuela, RB')] = c('Russia','Egypt','Venezuela')
tourism = read.csv('Combined_tourism_Data.csv',stringsAsFactors = F)
setwd("~/Desktop/R-Shiny-Project/Tourism")
tourism = read.csv('Combined_tourism_Data.csv',stringsAsFactors = F)
runApp()
runApp()
runApp()
plot(Geo)
tourism = read.csv('Combined_tourism_Data.csv',stringsAsFactors = F)
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism = read.csv('Combined_tourism_Data.csv',stringsAsFactors = F)
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism = read.csv('Combined_tourism_Data.csv',stringsAsFactors = F)
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
tourism = read.csv('Combined_tourism_Data.csv',stringsAsFactors = F)
Geo=gvisGeoChart(tourism, locationvar="Country.Name")
plot(Geo)
Geo=gvisGeoChart(tourism, locationvar="Norway")
plot(Geo)
?gvisGeoChart
Geo=gvisGeoChart(locationvar="Norway")
plot(Geo)
Geo=gvisGeoChart(tourism, locationvar="Country.Name",hovervar = "Country.Name")
plot(Geo)
runApp()
?gvisTimeline
runApp()
class(tourism$Country.Name)
shinyUI(dashboardPage(
skin = 'green',
dashboardHeader(title = "World Tourism",titleWidth = 250),
dashboardSidebar(width = 250,
sidebarUserPanel('',image = 'world.jpg'),
sidebarMenu(
menuItem('Home',tabName = 'Home',icon = icon('home'),badgeLabel = 'new',badgeColor = 'blue'),
menuItem('Country',tabName = 'Country',icon = icon('flag')),
menuItem('Tourism by the Numbers',tabName = 'Tourism by the Numbers',icon = icon('map-marked-alt'),
menuItem('Inbound',tabName = 'Inbound',icon=icon('plane-arrival')),
menuItem('Outbound',tabName = 'Outbound',icon = icon('plane-departure'))),
menuItem('Tourism Profit',tabName = 'Tourism Profit',icon = icon('coins'))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'Home',
fixedRow(responsive = NULL,
infoBoxOutput('hotCountry'),
infoBoxOutput('year'),
infoBoxOutput('tourists'),
leafletOutput('mymap'),
box(title = 'Travel the World', status='success',solidHeader = TRUE)
)),
tabItem(tabName = 'Country',
fluidRow(
column(width = 4,offset =0.5,
selectizeInput('selected','Select Country to Display',country))),
fluidRow(
infoBoxOutput('country_abb'),
infoBoxOutput('region'),
infoBoxOutput('income')),
fluidRow(
column(width=12,offset=0.5,
DT::dataTableOutput('table')
)),
fluidRow(
column(12,
box(HTML("*arrivals: Number of tourists visited that year <br/> *departures: Number of residence traveling from country that year <br/>
*total_receipt: Total amount visitors spent traveling to country ($USD) <br> *receipt_transport: Portion of total_receipt used on transportation (flights, trains, etc.) ($USD) <br/>
*receipt_travel: Portion of total_receipt spent in the country ($USD) <br/> *ratio_exports: Ratio of total_recipts (tourism industry) to a country's total exports (%) <br/>
*total_expenditures: Total amount residences spent traveling to a different country ($USD) <br/> *expenditures_transport: Portion of total_expenditures used on transportation (flights, trains, etc.) ($USD) <br/>
*expenditures_travel: Potion of total_expenditures spent in the traveling country ($USD)"),title = 'KEY',status='danger',solidHeader = TRUE,width=12)
))),
tabItem(tabName = 'Inbound',
fluidRow(
column(width=4,offset = 0.5,
selectizeInput('selected2','Select Country to Display',country))),
fluidRow(
box(htmlOutput('graph')))
),
tabItem(tabName = 'Country Profit')
)
)
))
runApp()
tourism %>% group_by(.,Country.Name) %>% filter(.,Country.Name == 'Switzerland') %>%
select(.,year,departures)
(tourism %>% group_by(.,Country.Name) %>% filter(.,Country.Name == 'Switzerland') %>%
select(.,year,departures))[2:3]
runApp()
runApp()
runApp()
runApp()
?htmlOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(tourism$year)
runApp()
runApp()
tourism
tourism %>% group_by(.,Country.Name) %>% filter(.,Country.Name == 'United Arab Emirates')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
(tourism %>% group_by(.,Country.Name) %>% filter(.,Country.Name == 'Switzerland',!is.na(arrivals)) %>% arrange(.,desc(year)))$year[1:2]
(tourism %>% group_by(.,Country.Name) %>% filter(.,Country.Name == 'Switzerland',!is.na(arrivals)) %>% arrange(.,desc(year)))$arrivals[1:2]
(tourism %>% group_by(.,Country.Name) %>% filter(.,Country.Name == 'Switzerland',!is.na(arrivals)) %>% arrange(.,desc(year)))$arrivals[1:2]
.Last.value[1]/.Last.value[2]*100
runApp()
runApp()
runApp()
group_country = tourism %>% group_by(.,Country.Name)
runApp()
m = c(1,2,3,4,5)
m[2/1]
m[3/1]
m[4/2]
m = c(m,10)
m
m[6/5]
m[6]
m[6]/m[2]
head(group_country)
tourism %>% group_by(.,Country.Name)
head(tourism)
filter(tourism,Country.Name = 'Aruba')
filter(tourism,Country.Name == 'Aruba')
runApp()
runApp()
tail(m)
tail(m[1])
tail(m)[1]
tail(m,n=1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
dollar_format(1000000)
dollar_format()c(10000)
dollar_format()(c(10000))
sapply(tourism$total_receipts,dollar_format)
sapply((tourism$total_receipts),dollar_format)
sapply((tourism$total_receipts),dollar_format())
m = sapply((tourism$total_receipts),dollar_format())
m[1]
m[1]-m[2]
colnames(tourism)
tourism[8:14] = sapply((tourism[8:14]),dollar_format())
runApp()
currency = tourism
currecny[8:14] = sapply((currency[8:14]),dollar_format())
currency[8:14] = sapply((currency[8:14]),dollar_format())
head(currency)
runApp()
currency = tourism
colnames(currency)
currency[8:10,12:14] = sapply((currency[8:10,12:14]),dollar_format())
currency[6,7] = sapply(currency[6,7],comma)
percent(10)
percent(currency$ratio_exports/100)
currency[11] = percent(currency$ratio_exports/100)
runApp()
head(currency)
currency[8:10,12:14] = sapply((currency[8:10,12:14]),dollar_format())
currency[6,7] = sapply(currency[6,7],comma)
currency[8,9,10,12,13,14] = sapply((currency[8,9,10,12,13,14]),dollar_format())
currency[1,2,3]
currency[1:3]
currency[c(8:10,12:14)] = sapply((currency[c(8:10,12:14)]),dollar_format())
c(8:10,12:14)
currency[c(8:10,12:14)]
currency[c(8:10,12:14)] = sapply((currency[c(8:10,12:14)]),dollar_format
)
currency = tourism
currency[c(8:10,12:14)] = sapply((currency[c(8:10,12:14)]),dollar_format)
currency[c(8:10,12:14)] = sapply((currency[c(8:10,12:14)]),dollar_format())
currency[6:7] = sapply(currency[6:7],comma)
currency[11] = percent(currency[11]/100)
currency[11] = percent(currency$ratio_exports/100)
runApp()
runApp()
runApp()
runApp()
format(round(3.00000012,2),nsmall = 2)
as.numeric(round(3.0012345,2))
as.numeric(format(round(3.00000012,2),nsmall = 2))
as.numeric(round(3.0012345,digits=4))
as.numeric(round(3.0012345,digits=2))
as.numeric(round(3.0012345,digits=3))
runApp()
runApp()
format(12.0003,nsmall = 2)
format(12.0345,nsmall = 2)
percent(as.numeric(round(12.34567,2)))
class(.Last.value)
runApp()
runApp()
?sidebarUserPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/R-Shiny-Project/Tourism")
runApp()
